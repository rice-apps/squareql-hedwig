# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent values between -(2^53) + 1 and 2^53 - 1. 
"""
scalar BigInt

type CatalogCategory {
  name: String
}

type CatalogDiscount {
  amountMoney: Money
  discountType: String
  labelColor: String
  modifyTaxBasis: String
  name: String
  percentage: String
  pinRequired: Boolean
}

type CatalogImage {
  caption: String
  name: String
  url: String
}

type CatalogItem {
  abbreviation: String
  availableElectronically: Boolean
  availableForPickup: Boolean
  availableOnline: Boolean
  categoryId: ID
  description: String
  itemOptions: [CatalogItemOptionForItem]
  labelColor: String
  modifierListInfo: [CatalogItemModifierListInfo]
  name: String
  productType: String
  skipModifierScreen: Boolean
  taxIds: [String]
  variations: [CatalogObject]
}

type CatalogItemModifierListInfo {
  enabled: Boolean
  maxSelectedModifiers: Int
  minSelectedModifiers: Int
  modifierListId: String
  modifierOverrides: [CatalogModifierOverride]
}

type CatalogItemOption {
  description: String
  displayName: String
  name: String
  showColors: Boolean
  values: [CatalogObject]
}

type CatalogItemOptionForItem {
  itemOptionId: String
}

type CatalogItemOptionValue {
  color: String
  description: String
  itemOptionId: String
  name: String
  ordinal: Int
}

type CatalogItemOptionValueForItemVariation {
  itemOptionId: String
  itemOptionValueId: String
}

type CatalogItemVariation {
  availableForBooking: Boolean
  inventoryAlertThreshold: BigInt
  inventoryAlertType: String
  itemId: ID
  itemOptionValues: [CatalogItemOptionValueForItemVariation]
  locationOverrides: [ItemVariationLocationOverrides!]
  measurementUnitId: String
  name: String
  ordinal: Int
  priceMoney: Money
  pricingType: String
  serviceDuration: BigInt
  sku: String
  teamMemberIds: [String!]
  trackInventory: Boolean
  upc: String
  userData: String
}

type CatalogMeasurementUnit {
  measurementUnit: MeasurementUnit
  precision: Int
}

type CatalogModifier {
  modifierListId: String
  name: String
  ordinal: Int
  priceMoney: Money
}

type CatalogModifierList {
  modifiers: [CatalogObject]
  name: String
  ordinal: Int
  selectionType: String
}

type CatalogModifierOverride {
  modifierId: String
  onByDefault: Boolean
}

type CatalogObject {
  absentAtLocationIds: [String]
  catalogV1Ids: [CatalogV1Id]
  categoryData: CatalogCategory
  discountData: CatalogDiscount
  id: ID!
  imageData: CatalogImage
  imageId: String
  isDeleted: Boolean
  itemData: CatalogItem
  itemOptionData: CatalogItemOption
  itemOptionValueData: CatalogItemOptionValue
  itemVariationData: CatalogItemVariation
  measurementUnitData: CatalogMeasurementUnit
  modifierData: CatalogModifier
  modifierListData: CatalogModifierList
  presentAtAllLocations: Boolean
  presentAtLocationIds: [String]
  pricingRuleData: CatalogPricingRule
  productSetData: CatalogProductSet
  quickAmountsSettingsData: CatalogQuickAmountsSettings
  subscriptionPlanData: CatalogSubscriptionPlan
  taxData: CatalogTax
  timePeriodData: CatalogTimePeriod
  type: String!
  updatedAt: String
  version: BigInt
}

type CatalogPricingRule {
  applyProductsId: String
  discountId: String
  excludeProductsId: String
  excludeStrategy: String
  matchProductsId: String
  name: String
  timePeriodIds: [String]
  validFromDate: String
  validFromLocalTime: String
  validUntilDate: String
  validUntilLocalTime: String
}

type CatalogProductSet {
  allProducts: Boolean
  name: String
  productIdsAll: [String]
  productIdsAny: [String]
  quantityExact: BigInt
  quantityMax: BigInt
  quantityMin: BigInt
}

type CatalogQuickAmount {
  amount: Money!
  ordinal: BigInt
  score: BigInt
  type: String!
}

type CatalogQuickAmountsSettings {
  amounts: [CatalogQuickAmount]
  eligibleForAutoAmounts: Boolean
  option: String!
}

type CatalogSubscriptionPlan {
  name: String
  phases: [SubscriptionPhase]
}

type CatalogTax {
  appliesToCustomAmounts: Boolean
  calculationPhase: String
  enabled: Boolean
  inclusionType: String
  name: String
  percentage: String
}

type CatalogTimePeriod {
  event: String
}

type CatalogV1Id {
  catalogV1Id: String
  locationId: String
}

type ItemVariationLocationOverrides {
  inventoryAlertThreshold: BigInt
  inventoryAlertType: String
  locationId: String
  priceMoney: Money
  pricingType: String
  trackInventory: Boolean
}

type MeasurementUnit {
  areaUnit: String
  customUnit: MeasurementUnitCustom
  genericUnit: String
  lengthUnit: String
  timeUnit: String
  type: String
  volumeUnit: String
  weightUnit: String
}

type MeasurementUnitCustom {
  abbreviation: String!
  name: String!
}

type Money {
  amount: BigInt
  currency: String
}

type Query {
  catalog(vendorName: String!): [CatalogObject]
}

type SubscriptionPhase {
  cadence: String!
  ordinal: BigInt
  periods: Int
  recurringPriceMoney: Money!
  uid: String
}
